#+TITLE: CLI to Web UI Session Migration Plan
#+DATE: 2025-08-15
#+AUTHOR: Claude Code

* Overview

This plan outlines the migration of 40 existing CLI sessions from rubber-ducky-node to the unified web UI session management system, enabling seamless access to all session history across both interfaces.

* Current State Analysis

** CLI Sessions (rubber-ducky database)
- Collection: =sessions= with 40 documents
- Schema: =name=, =agentNames=, =iterations=, =updatedAt=
- Date Range: July 24 - August 15, 2025
- Iteration Count: 1-11 per session

** Web UI Sessions (test database)  
- Collection: =sessions= with 8 documents
- Schema: Comprehensive SessionDocument interface
- Features: Auto-creation, real-time persistence, browsing UI

* Migration Strategy

** Phase 1: Preparation
1. *Default User Setup*
   - Use existing user ID: =689df4fadbf2d345b9588c3c= (from web sessions)
   - All CLI sessions will be owned by this default user
   - Enables immediate UI access post-migration

2. *Database Structure*
   - Source: =rubber-ducky.sessions=
   - Target: =test.sessions= (unified collection)
   - Preserve original data integrity

** Phase 2: Schema Transformation

*** Direct Field Mappings
| CLI Field       | Web UI Field        | Notes                    |
|-----------------+---------------------+--------------------------|
| =name=          | =name=              | Direct copy              |
| =agentNames[0]= | =lastAgentUsed=     | Use first/most recent    |
| =updatedAt=     | =lastAccessedAt=    | Map to access tracking   |
| =iterations=    | =iterations=        | Preserve CLI format      |

*** Generated Fields
| Field              | Generation Strategy                        |
|--------------------+-------------------------------------------|
| =sessionId=        | Generate UUID v4                         |
| =createdBy=        | Default user ID (689df4fadbf2d345b9588c3c) |
| =createdAt=        | Use first iteration timestamp             |
| =updatedAt=        | Use existing =updatedAt=                  |
| =tags=             | Derive from =agentNames= array            |
| =isActive=         | Default =true=                            |
| =isArchived=       | Default =false=                           |
| =iterationCount=   | Count of =iterations= array               |

*** Message Format Conversion
Each CLI iteration transforms into web UI chat messages:

**** User Message
#+BEGIN_SRC javascript
{
  id: uuidv4(),
  role: 'user',
  content: iteration.transcript,
  timestamp: iteration.timestamp,
  audioMetadata: { language: 'en-US' }, // assumed
  agentUsed: session.agentNames[0]
}
#+END_SRC

**** Assistant Message  
#+BEGIN_SRC javascript
{
  id: uuidv4(),
  role: 'assistant', 
  content: iteration.agentOutputs[agentName],
  timestamp: new Date(iteration.timestamp.getTime() + 1000), // +1 second
  agentUsed: agentName
}
#+END_SRC

** Phase 3: Implementation Approach

*** Migration Script Features
1. *Batch Processing* - Process all 40 sessions efficiently
2. *Data Validation* - Verify integrity before and after migration  
3. *Rollback Support* - Backup mechanism for safety
4. *Progress Tracking* - Detailed logging and status updates
5. *Duplicate Prevention* - Check for existing sessions before insert

*** Error Handling
- Invalid session data → Log and skip with details
- Missing required fields → Generate sensible defaults  
- Duplicate sessions → Update existing vs create new strategy
- Database connection issues → Retry with exponential backoff

* Implementation Plan

** Step 1: Create Migration API Endpoint
- =POST /api/migrate-sessions=
- Authentication required (admin user)
- Supports dry-run mode for testing
- Returns detailed migration report

** Step 2: Build Migration Service  
- Connect to both databases (rubber-ducky and test)
- Transform CLI session schema to web UI format
- Handle edge cases and validation
- Comprehensive logging and error reporting

** Step 3: CLI Integration (Optional)
- Add =migrate-sessions-to-ui= command to rubber-ducky-node
- Maintains consistency with =migrate-agents-to-db= approach
- Provides CLI users with direct migration path

** Step 4: Testing & Validation
- Verify all 40 sessions appear in web UI session browser
- Test session loading and message display functionality  
- Confirm CLI sessions maintain iteration-based structure
- Validate cross-platform compatibility

* Expected Outcomes

** Immediate Benefits
- All 40 CLI sessions accessible via web UI browser
- Complete session history unified in one interface
- Enhanced features (search, tags, export) for CLI sessions
- Seamless workflow between CLI and web interfaces

** Long-term Advantages  
- Single source of truth for all session data
- Consistent backup and archival processes
- Unified analytics and usage tracking
- Enhanced collaboration and sharing capabilities

* Risk Mitigation

** Data Safety
- Full backup before migration execution
- Rollback scripts ready for immediate recovery
- Dry-run testing on sample data first
- Validation checksums for data integrity

** Compatibility
- Preserve original CLI iteration structure
- Maintain backward compatibility with rubber-ducky-node
- Test both CLI and web UI access post-migration
- Document any behavioral changes

* Timeline

| Phase                    | Duration | Status  |
|--------------------------+----------+---------|
| Planning & Analysis      | Complete | ✅ Done |
| Migration Script Dev     | 2-3 hours| Pending |
| Testing & Validation     | 1 hour   | Pending |
| Production Migration     | 30 mins  | Pending |
| Post-Migration Testing   | 1 hour   | Pending |

*Total Estimated Time: 4-5 hours*

* Success Criteria

1. ✅ All 40 CLI sessions visible in web UI session browser
2. ✅ Session details load correctly with proper message formatting  
3. ✅ CLI iteration structure preserved for rubber-ducky-node compatibility
4. ✅ No data loss or corruption during migration process
5. ✅ Both CLI and web UI can access unified session data seamlessly

* Next Actions

1. Implement migration API endpoint
2. Create comprehensive migration service
3. Test migration with sample sessions
4. Execute full migration to production  
5. Validate unified session access across both interfaces